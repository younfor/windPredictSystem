
#backup
sqlite3 db.sqlite3 .dump >init20150310.sql
sqlite3 db.sqlite3 â€œ.read xx.sql"
#create project

    $ django-admin.py startproject mysite
    $ python manage.py startapp polls

#database

    $ python manage.py makemigrations
    $ python manage.py migrate\
    $ python manage.py createsuperuser

#run project

    $ python manage.py runserver
    $ python manage.py runserver 8080
    $ python manage.py runserver 0.0.0.0:8000

#Model

    ##Field options

        SHIRT_SIZES = (
                ('S', 'Small'),
                ('M', 'Medium'),
                ('L', 'Large'),
            )
        null=True,blank=True(aboutform),choices=SHIRT_SIZES,default,help_text,primary_key,unique

    ##Verbose field names

        first_name = models.CharField("person's first name", max_length=30)
        poll = models.ForeignKey(Poll, verbose_name="the related poll")
        sites = models.ManyToManyField(Site, verbose_name="list of sites")
        place = models.OneToOneField(Place, verbose_name="related place")

    ##Meta options
        ordering = ["horn_length"]
        verbose_name_plural = "oxen"
        def _get_full_name(self):
            "Returns the person's full name."
            return '%s %s' % (self.first_name, self.last_name)

#Admin

    class UserProfileInline(admin.StackedInline):
        model = UserProfile
        can_delete = False
        verbose_name_plural = 'UserProfile'

        def get_fields(self, request, obj=None):
            form = super(UserProfileInline, self).get_formset(
                request, obj, fields=None).form
            # if 'level' in form.base_fields:
            #   print 'yes level'
            # else:
            #   print 'no level'
            return list(form.base_fields) + list(self.get_readonly_fields(request, obj))
    class QuestionAdmin(admin.ModelAdmin):
        fields = ['pub_date', 'question_text']
        fieldsets = [
            (None,               {'fields': ['question_text']}),
            ('Date information', {'fields': ['pub_date']}),
        ]
        list_display = ('username', 'is_staff','get_UserLevel','was_published_recently')
        inlines = (UserProfileInline, )
        def was_published_recently(self):
            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
        was_published_recently.admin_order_field = 'pub_date'
        was_published_recently.boolean = True
        was_published_recently.short_description = 'Published recently?'


#View

    url(r'^(?P<question_id>\d+)/vote/$', views.vote, name='vote'),
    def vote(request, question_id):
        pass

#Query
    
    >>> from blog.models import Blog
    >>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
    >>> b.save()

    ##ForeignKey
        >>> from blog.models import Entry
        >>> entry = Entry.objects.get(pk=1)
        >>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
        >>> entry.blog = cheese_blog
        >>> entry.save()

    ##ManyToMany
        >>> from blog.models import Author
        >>> joe = Author.objects.create(name="Joe")
        >>> entry.authors.add(joe,joe,joe)

    all_entries = Entry.objects.all()
    Entry.objects.filter(pub_date__year=2006)
    >>> Entry.objects.filter(
    ...     headline__startswith='What'
    ... ).exclude(
    ...     pub_date__gte=datetime.date.today()
    ... ).filter(
    ...     pub_date__gte=datetime(2005, 1, 30)
    ... )
    >>> q1 = Entry.objects.filter(headline__startswith="What")
    >>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
    >>> q3 = q1.filter(pub_date__gte=datetime.date.today())
    one_entry = Entry.objects.get(pk=1)
    Entry.objects.all()[:5]
    Entry.objects.order_by('headline')[0]
    Entry.objects.filter(blog_id=4)
    >>> Entry.objects.filter(blog__name='Beatles Blog')
    >>> Blog.objects.filter(entry__headline__contains='Lennon')
    Blog.objects.filter(entry__authors__name__isnull=True,xxxx=xx)
    >>> from django.db.models import F
    >>> Entry.objects.filter(n_comments__gt=F('n_pingbacks'))
    Q(question__startswith='Who') | Q(question__startswith='What')
    Poll.objects.get(
    Q(question__startswith='Who'),
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)))
    >>> Entry.objects.filter(rating__lt=F('n_comments') + F('n_pingbacks'))
    >>> from datetime import timedelta
    >>> Entry.objects.filter(mod_date__gt=F('pub_date') + timedelta(days=3))
    >>> Blog.objects.filter(pk__in=[1,4,7])
    operators = {
        'exact': '= %s',
        'iexact': 'LIKE %s',
        'contains': 'LIKE BINARY %s',
        'icontains': 'LIKE %s',
        'regex': 'REGEXP BINARY %s',
        'iregex': 'REGEXP %s',
        'gt': '> %s',
        'gte': '>= %s',
        'lt': '< %s',
        'lte': '<= %s',
        'startswith': 'LIKE BINARY %s',
        'endswith': 'LIKE BINARY %s',
        'istartswith': 'LIKE %s',
        'iendswith': 'LIKE %s',
    }
    Entry.objects.all().delete()
    >>> Entry.objects.all().update(n_pingbacks=F('n_pingbacks') + 1)
    b.entry_set.all()
    Entry.objects.filter(blog=b) # Query using object instance
    ntry.objects.filter(blog=b.id) # Query using id from instance
    Entry.objects.filter(blog=5) # Query using id directly